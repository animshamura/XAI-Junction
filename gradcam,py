import torch
import torch.nn.functional as F
from torchvision import models, transforms
from PIL import Image
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load a pretrained model
model = models.resnet50(pretrained=True)
model.eval()

# Target layer to visualize
target_layer = model.layer4[2].conv3

# Preprocess the image
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])

# Load image
img_path = 'your_image.jpg'  # replace with your image path
img = Image.open(img_path).convert('RGB')
input_tensor = transform(img).unsqueeze(0)

# Forward pass & hook for gradients
gradients = []
activations = []

def backward_hook(module, grad_input, grad_output):
    gradients.append(grad_output[0])

def forward_hook(module, input, output):
    activations.append(output)

# Register hooks
target_layer.register_forward_hook(forward_hook)
target_layer.register_backward_hook(backward_hook)

# Forward + backward to get gradients
output = model(input_tensor)
class_idx = output.argmax().item()
model.zero_grad()
output[0, class_idx].backward()

# Get gradients and activations
grads = gradients[0].detach()
acts = activations[0].detach()

# Compute Grad-CAM
weights = grads.mean(dim=[2, 3], keepdim=True)
grad_cam = (weights * acts).sum(dim=1).squeeze()
grad_cam = F.relu(grad_cam)

# Normalize heatmap
grad_cam = grad_cam - grad_cam.min()
grad_cam = grad_cam / grad_cam.max()
grad_cam = grad_cam.cpu().numpy()

# Convert to heatmap
heatmap = cv2.applyColorMap(np.uint8(255 * grad_cam), cv2.COLORMAP_JET)
heatmap = np.float32(heatmap) / 255
img_np = np.array(img.resize((224, 224))) / 255.0
overlay = heatmap + img_np
overlay = overlay / np.max(overlay)

# Show result
plt.imshow(overlay)
plt.axis('off')
plt.title(f"Grad-CAM for class: {class_idx}")
plt.show()
